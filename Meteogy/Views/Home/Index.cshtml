@{
    ViewBag.Title = "Home Page";
}
<div class="row">
    <!--Maps Section Start-->
    <div class="col-md-9">
        <h1>Map</h1>
        <!--Google Map-->
        <div id="map" style="width:100%; height:400px;"></div>
        <!--Color Map Section Start-->
        <!--Color Map-->
        <div style="text-align:center; padding: 10px 0;">
            <canvas id="UI_Canvas" style="width:500px; height:250px; margin: 0 auto;"></canvas>            
            <!--Color Map Legend-->
            <div id="UI_Legend" hidden>
                <h4><span id="UI_LegendParameter">Temperature</span>:</h4>
                <div style="min-width: 560px">
                    <span id="UI_LegendMax">50</span>
                    <img width="500" height="20" src="~/Content/palette.png" />
                    <span id="UI_LegendMin">-30</span>
                </div>
            </div>
        </div>
        <!--Color Map Section End-->
    </div>
    <!--Maps Section End-->
    <!--Formular Section Start-->
    <div class="col-md-3">
        <h1>Formular</h1>
        <hr />
        <form id="UI_FormParameters" onsubmit="event.preventDefault(); ColorMapRequest(this);">
            <!--Parameter Select-->
            <div class="form-group">
                <label for="UI_Parameter">Parameter</label>
                <select class="form-control" id="UI_Parameter" name="parameter" required>
                    <option value="temperature">Temperature</option>
                    <option value="humidity">Humidity</option>
                    <option value="windspeed">Wind speed</option>
                    <option value="smog">Smog</option>
                </select>
            </div>
            <!--Date Pickers-->
            <div class="form-group">
                <label for="UI_DateRange">Date Range</label>
                <div class="input-daterange" id="datepicker">
                    <div class="input-group">
                        <span class="input-group-addon"><small>From</small></span>
                        <input type="text" class="input-sm form-control" placeholder="mm/dd/yyyy" name="startDate" required />
                        <span class="input-group-addon"><small>To</small></span>
                        <input type="text" class="input-sm form-control" placeholder="mm/dd/yyyy" name="endDate" required />
                    </div>
                </div>
            </div>
            <!--Submit Button-->
            <div class="form-group">
                <button type="submit" id="UI_ButtonSubmit" class="btn btn-default">Submit</button>
            </div>
        </form>
        <div id="UI_AlertFormWarning" class="alert alert-warning" role="alert" hidden></div>
        <div id="UI_AlertFormError" class="alert alert-danger" role="alert" hidden></div>
    </div>
    <!--Formular Section End-->
</div>

@section Scripts {
    <script type="text/javascript">
        var rectangle;
        var map;
        var centerLatLng = { lat: 48.6688584, lng: 19.6950909 };
        var height = 1.95;
        var width = 5.9;

        $(document).ready(function () {
            InitDatePicker();

        });

        function InitDatePicker() {
            $('#UI_FormParameters .input-daterange').datepicker({
                autoclose: true,
                todayHighlight: true,
                todayBtn: "linked"
            });
        }

        function ColorMapRequest(form) {
            var jsonObject = {
                "bounds": {
                    "north": rectangle.getBounds().getNorthEast().lat().toString(),
                    "east": rectangle.getBounds().getNorthEast().lng().toString(),
                    "south": rectangle.getBounds().getSouthWest().lat().toString(),
                    "west": rectangle.getBounds().getSouthWest().lng().toString()
                },
                "parameter": form["parameter"].value,
                "startDate": form["startDate"].value,
                "endDate": form["endDate"].value
            };
            $("#UI_AlertFormWarning").hide();
            $("#UI_AlertFormError").hide();
            var button = $("#UI_ButtonSubmit");
            button.text("Loading...");
            button.prop("disabled", true);
            $.ajax({
                url: "@Url.Action("GetColorMap")",
                type: "POST",
                data: JSON.stringify(jsonObject),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function (response) {
                    alert(response.responseText);
                },
                success: function (response) {
                    if (response.status == 200) {
                        Draw(response.map);
                        RefreshLegend(response.legend)
                    }
                    else if (response.status == 204) {
                        $("#UI_AlertFormWarning").text(response.message);
                        $("#UI_AlertFormWarning").show();
                    }
                    else {
                        $("#UI_AlertFormError").text(response.message);
                        $("#UI_AlertFormError").show();
                    }
                },
                complete: function () {
                    button.text("Submit");
                    button.prop("disabled", false);
                }
            });
        }

        function AddLocation(lat, lng) {
            var jsonObject = {
                "lat": lat,
                "lng": lng
            };

            $.ajax({
                url: "@Url.Action("AddLocation")",
                type: "POST",
                data: JSON.stringify(jsonObject),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function (response) {
                    alert(response.responseText);
                }
            });
        }

        function Draw(data) {
            var canvas = document.getElementById("UI_Canvas");
            var ctx = canvas.getContext("2d");

            var rectHeight = canvas.height / data.length;
            var rectWidth = canvas.width / data[0].length;
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < data[i].length; j++) {
                    ctx.fillStyle = "rgb(" + (data[i][j][0]).toString() + "," + (data[i][j][1]).toString() + "," + (data[i][j][2]).toString() + ")";
                    ctx.fillRect(j * rectWidth, i * rectHeight, rectWidth, rectHeight);
                }
            }
        }

        function RefreshLegend(data) {
            $("#UI_Legend").show();
            $("#UI_LegendParameter").text(data["Parameter"]);
            $("#UI_LegendMin").text(data["Min"]);
            $("#UI_LegendMax").text(data["Max"]);
        }

        function calculateBounds() {
            return {
                south: centerLatLng.lat - height / 2,
                north: centerLatLng.lat + height / 2,
                west: centerLatLng.lng - width / 2,
                east: centerLatLng.lng + width / 2
            };
        }

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: centerLatLng,
                zoom: 7,
                mapTypeId: google.maps.MapTypeId.TERRAIN
            });

            rectangle = new google.maps.Rectangle({
                bounds: calculateBounds(),
                editable: true,
                draggable: true
            });
            rectangle.setMap(map);
            rectangle.addListener('bounds_changed', function (event) {
                var ne = rectangle.getBounds().getNorthEast();
                var sw = rectangle.getBounds().getSouthWest();
                centerLatLng.lat = sw.lat() + height / 2;
                centerLatLng.lng = sw.lng() + width / 2;
                height = ne.lat() - sw.lat();
                width = ne.lng() - sw.lng();
            });

            map.addListener('click', function (event) {
                AddLocation(event.latLng.lat(), event.latLng.lng());
                centerLatLng.lat = event.latLng.lat();
                centerLatLng.lng = event.latLng.lng();
                var ne = rectangle.getBounds().getNorthEast();
                var sw = rectangle.getBounds().getSouthWest();
                height = ne.lat() - sw.lat();
                width = ne.lng() - sw.lng();
                rectangle.setBounds(calculateBounds());
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?callback=initMap" async defer></script>
}